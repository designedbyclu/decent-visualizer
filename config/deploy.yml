# Name of your application. Used to uniquely configure containers.
service: visualizer

# Name of the container image.
image: mrfoto/visualizer

# Deploy to these servers.
servers:
  web:
    - hvapp
  job:
    hosts:
      - hvapp
    cmd: bin/jobs

proxy:
  ssl: true
  hosts:
    - visualizer.coffee
    - www.visualizer.coffee

# Credentials for your image host.
registry:
  username: mrfoto
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: arm64

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
  clear:
    # Set number of cores available to the application on each server (default: 1).
    WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    DB_HOST: hvdb

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: accessory exec postgres --interactive --reuse "psql -U visualizer -d visualizer_production"

# Use a persistent storage volume.
volumes:
  - "visualizer_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  postgres:
    image: postgres:17
    host: hvdb
    port: 5432
    env:
      clear:
        POSTGRES_USER: "visualizer"
        POSTGRES_DB: "visualizer_production"
      secret:
        - POSTGRES_PASSWORD
    files:
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
      - infrastructure/postgres/postgresql.conf:/data/postgresql.conf # comment this out for the initial boot
    directories:
      - data:/var/lib/postgresql/data
    options:
      shm-size: 3g

  pg_backup:
    image: mrfoto/postgres-backup-s3:latest
    host: hvdb
    env:
      clear:
        SCHEDULE: "@daily"
        BACKUP_KEEP_DAYS: 7
        S3_REGION: fsn1
        S3_BUCKET: pg-backups
        S3_ENDPOINT: https://fsn1.your-objectstorage.com
        S3_PREFIX: visualizer
        POSTGRES_HOST: visualizer-postgres
        POSTGRES_USER: visualizer
        POSTGRES_DATABASE: visualizer_production
      secret:
        - POSTGRES_PASSWORD
        - S3_ACCESS_KEY_ID
        - S3_SECRET_ACCESS_KEY
    options:
      network: ipv6-network

  prometheus:
    image: prom/prometheus:v3.0.0-beta.0
    host: hvdb
    port: "127.0.0.1:9090:9090"
    directories:
      - prometheus_data:/prometheus
    files:
      - infrastructure/prometheus/config.yml:/etc/prometheus/prometheus.yml
    options:
      user: 0
    cmd: --config.file=/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    host: hvdb
    port: "127.0.0.1:3100:3000"
    env:
      clear:
        GF_SECURITY_ADMIN_PASSWORD: pass
    directories:
      - grafana_data:/var/lib/grafana
    options:
      user: 0

  node_exporter:
    image: prom/node-exporter:latest
    hosts:
      - hvdb
      - hvapp
    port: 9100

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    hosts:
      - hvdb
      - hvapp
    port: 9200
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    cmd: --port=9200
